#version 460

// Sorts tiles of size 1024 using shared memory; requires paddedCount to be a multiple of 1024 or padded

struct MortonObject {
    uint mortonCode;
    uint objectId;
};

layout(std430, binding = 1) buffer MortonCodes
{
    MortonObject mortonObjects[];
};

uniform uint paddedCount; // power-of-two, >= numObjects

bool greater(MortonObject a, MortonObject b) {
    if (a.mortonCode != b.mortonCode) return a.mortonCode > b.mortonCode;
    return a.objectId > b.objectId;
}

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
shared MortonObject sdata[1024];

void main() {
    uint tid = gl_LocalInvocationID.x;
    uint tile = gl_WorkGroupID.x;
    uint base = tile * 1024u;
    if (base >= paddedCount) return;

    uint i = base + tid;
    MortonObject val;
    if (i < paddedCount) val = mortonObjects[i]; else { val.mortonCode = 0xFFFFFFFFu; val.objectId = 0xFFFFFFFFu; }
    sdata[tid] = val;
    barrier();

    for (uint k = 2u; k <= 1024u; k <<= 1u) {
        for (uint j = k >> 1u; j > 0u; j >>= 1u) {
            uint ixj = tid ^ j;
            if (ixj > tid) {
                bool up = ((tid & k) == 0u);
                MortonObject a = sdata[tid];
                MortonObject b = sdata[ixj];
                bool swap = up ? greater(a,b) : greater(b,a);
                if (swap) {
                    sdata[tid] = b;
                    sdata[ixj] = a;
                }
            }
            barrier();
        }
    }

    if (i < paddedCount) mortonObjects[i] = sdata[tid];
}
