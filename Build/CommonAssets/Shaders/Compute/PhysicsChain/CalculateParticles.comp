// CalculateParticles.comp
#version 450

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

// --- Struct Definitions ---

struct Particle
{
    vec3 Position;
    float _pad0;
    vec3 PrevPosition;
    float _pad1;
    vec3 TransformPosition;
    float _pad2;
    vec3 TransformLocalPosition;
    float _pad3;
    int ParentIndex;
    float Damping;
    float Elasticity;
    float Stiffness;
    float Inert;
    float Friction;
    float Radius;
    float BoneLength;
    int IsColliding;
    int _pad4;
    int _pad5;
    int _pad6;
};

struct ParticleTreeData
{
    vec3 LocalGravity;
    float _pad0;
    vec3 RestGravity;
    float _pad1;
    int ParticleStart;
    int ParticleCount;
    float _pad2;
    float _pad3;
    mat4 RootWorldToLocal;
    float BoneTotalLength;
    int _pad4;
    int _pad5;
    int _pad6;
};

// --- Buffers ---

layout(std430, binding = 0) buffer ParticlesBuffer
{
    Particle Particles[];
};

layout(std430, binding = 1) buffer ParticleTreesBuffer
{
    ParticleTreeData ParticleTrees[];
};

// --- Uniforms ---

uniform float DeltaTime;
uniform float ObjectScale;
uniform vec3 Force;
uniform vec3 Gravity;
uniform vec3 ObjectMove;

// --- Main ---

void main()
{
    uint pid = gl_GlobalInvocationID.x;
    // find the tree this particle belongs to
    int treeIndex = -1;
    for (int i = 0; i < int(ParticleTrees.length()); ++i)
    {
        int start = ParticleTrees[i].ParticleStart;
        int cnt   = ParticleTrees[i].ParticleCount;
        if (int(pid) >= start && int(pid) < start + cnt)
        {
            treeIndex = i;
            break;
        }
    }

    if (treeIndex < 0)
        return;

    Particle p = Particles[pid];

    if (p.ParentIndex >= 0)
    {
        // Verlet integration
        vec3 v = p.Position - p.PrevPosition;
        vec3 rmove = ObjectMove * p.Inert;
        p.PrevPosition = p.Position + rmove;

        float damp = p.Damping;
        if (p.IsColliding > 0)
        {
            damp += p.Friction;
            damp = min(damp, 1.0);
            p.IsColliding = 0;
        }

        vec3 accel = (Gravity + Force) * (ObjectScale * DeltaTime);
        p.Position += v * (1.0 - damp) + accel + rmove;
    }
    else
    {
        // root is anchored
        p.PrevPosition = p.Position;
        p.Position     = p.TransformPosition;
    }

    Particles[pid] = p;
}