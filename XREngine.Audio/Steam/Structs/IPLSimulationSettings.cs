using System.Runtime.InteropServices;

namespace XREngine.Audio.Steam;

/** Settings used to create a simulator. */
[StructLayout(LayoutKind.Sequential)]
public struct IPLSimulationSettings
{
    /** The types of simulation that this simulator will be used for. */
    public IPLSimulationFlags flags;

    /** The type of scene that will be used for simulations via \c iplSimulatorSetScene. The scene type
        cannot change during the lifetime of a simulator object. */
    public IPLSceneType sceneType;

    /** The type of reflections effect that will be used to render the results of reflections simulation.
        The reflections effect type cannot change during the lifetime of a simulator object. */
    public IPLReflectionEffectType reflectionType;

    /** The maximum number of point samples to consider when calculating occlusion using the
        volumetric occlusion algorithm. Different sources can use different numbers of samples, and the
        number of samples can change between simulation runs, but this is the maximum value. Increasing
        this value results in smoother occlusion transitions, at the cost of increased CPU usage. */
    public Int32 maxNumOcclusionSamples;

    /** The maximum number of rays to trace from the listener when simulating reflections. You can use
        different numbers of rays between simulation runs, but this is the maximum value. Increasing
        this value results in more accurate reflections, at the cost of increased CPU usage. */
    public Int32 maxNumRays;

    /** The number of directions to sample when generating diffusely reflected rays. Increasing this
        value may increase the accuracy of diffuse reflections. */
    public Int32 numDiffuseSamples;

    /** The maximum length (in seconds) of impulse responses generated by reflection simulations. You
        can change this value betweeen simulation runs, but this is the maximum value. Increasing this
        value results in longer, more accurate reverb tails, at the cost of increased CPU and memory usage. */
    public float maxDuration;

    /** The maximum Ambisonic order of impulse responses generated by reflection simulations. You can
        change this value between simulation runs, but this is the maximum value. Increasing this
        value results in more accurate directional variations in the impulse responses, at the cost of
        increased CPU and memory usage. */
    public Int32 maxOrder;

    /** The maximum number of sources for which reflection simulations will be run at any given time. */
    public Int32 maxNumSources;

    /** The number of threads used for real-time reflection simulations. */
    public Int32 numThreads;

    /** If using custom ray tracer callbacks, this the number of rays that will be passed to the callbacks
        every time rays need to be traced. */
    public Int32 rayBatchSize;

    /** The number of point samples to consider when calculating probe-to-probe visibility for pathing
        simulations. Baked paths may end up being occluded by dynamic objects, in which case you can configure
        the simulator to look for alternate paths in real time. This process will involve checking visibility
        between probes. */
    public Int32 numVisSamples;

    /** The sampling rate (in Hz) used for audio processing. */
    public Int32 samplingRate;

    /** The size (in samples) of the audio buffers used for audio processing. */
    public Int32 frameSize;

    /** The OpenCL device being used. Only necessary if \sceneType is \c IPL_SCENETYPE_RADEONRAYS, or \c reflectionType
        is \c IPL_REFLECTIONEFFECTTYPE_TAN. */
    public IPLOpenCLDevice openCLDevice;

    /** The Radeon Rays device being used. Only necessary if \sceneType is \c IPL_SCENETYPE_RADEONRAYS. */
    public IPLRadeonRaysDevice radeonRaysDevice;

    /** The TrueAudio Next device being used. Only necessary if \c reflectionType is \c IPL_REFLECTIONEFFECTTYPE_TAN. */
    public IPLTrueAudioNextDevice tanDevice;
}
